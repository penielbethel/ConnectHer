// Import the functions you need from the SDKs you need
import { initializeApp } from "firebase/app";
import { getAnalytics } from "firebase/analytics";
// TODO: Add SDKs for Firebase products that you want to use
// https://firebase.google.com/docs/web/setup#available-libraries

// Your web app's Firebase configuration
// For Firebase JS SDK v7.20.0 and later, measurementId is optional
const firebaseConfig = {
  apiKey: "AIzaSyCsQwg0D4gH1xCUiBmVi-nKoSEGHNy40yY",
  authDomain: "connecther-76f65.firebaseapp.com",
  projectId: "connecther-76f65",
  storageBucket: "connecther-76f65.firebasestorage.app",
  messagingSenderId: "745841685228",
  appId: "1:745841685228:web:d9b0dda1a964c9a564ebc9",
  measurementId: "G-4G8THWFDY5"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const analytics = getAnalytics(app);





FIBAE PUSH NOTFICATION KEY
BDzsFAUo-AoHxsyWwRXNVhBEs1HYK-XljgNWux7i15HvU6dWt6UOyhCisxAYp4T12KxWkCqRIEm9spyM-bvrLMg





































1. community.html (frontend)

  <!-- Top Bar -->
  <div class="top-bar">
    <img id="community-avatar" src="" alt="Avatar" />
    <div class="info">
      <h2 id="community-name">Community Name</h2>
      <p id="community-purpose">Purpose of the community...</p>
    </div>
    <i class="fas fa-phone"></i>
    <i class="fas fa-user-plus" onclick="openInviteModal()" title="Invite" style="margin-left: 10px;"></i>
<div style="position: relative;">
  <i class="fas fa-ellipsis-v" onclick="toggleTopMenu()" style="margin-left: 10px; cursor: pointer;"></i>
<div id="top-menu">
  <div class="menu-option" onclick="openMemberModal()">üë• View Members</div>
  <div class="menu-option" onclick="clearChat()"> üóëÔ∏èClear Chat</div>
  <div class="menu-option exit-button" onclick="confirmExitCommunity()">‚ùåExit Community</div>
</div>
</div>

<script src="https://cdn.socket.io/4.7.2/socket.io.min.js"></script>

  <script>
// ‚úÖ Load logged-in user
const currentUser = JSON.parse(localStorage.getItem("currentUser")) || {
  name: "Guest User",
  username: "guest",
  avatar: "https://via.placeholder.com/40"
};

let currentCommunity = null;
const communityId = localStorage.getItem("currentCommunityId");
const currentUsername = localStorage.getItem("username");
const socket = io(); // ‚úÖ Connect to Socket.IO server
let typingTimeout;
const input = document.getElementById("chat-input");

input.addEventListener("input", () => {
  socket.emit("typing-community", { room: communityId, from: currentUser.name });

  clearTimeout(typingTimeout);
  typingTimeout = setTimeout(() => {
    socket.emit("stopTyping-community", { room: communityId, from: currentUser.name });
  }, 2000);
});




let selectedFiles = [];

// ‚úÖ Page load: Load community
document.addEventListener('DOMContentLoaded', () => {
  if (!communityId) {
    alert("No community selected.");
    window.location.href = "communitylist.html";
    return;
  }
  loadCommunity();
  socket.emit("join-community", communityId);

  // Also restore any previously stored messages
  const chatArea = document.getElementById('chat-area');

fetch(`http://localhost:3000/api/communities/${communityId}/messages?username=${currentUser.username}`)
  .then(res => res.json())
  .then(data => {
    if (data.success && data.messages) {
      data.messages
  .filter(msg => !msg.hiddenFrom?.includes(currentUser.username))
  .forEach(msg => renderMessage(msg));
      const chatArea = document.getElementById("chat-area");
      chatArea.scrollTop = chatArea.scrollHeight;
    } else {
      console.error("‚ùå Failed to load messages:", data.message);
    }
  })
  .catch(err => {
    console.error("‚ùå Error fetching messages:", err);
  });

});




// ‚úÖ Load community data fresh from backend
async function loadCommunity() {
  try {
    const res = await fetch(`http://localhost:3000/api/communities/${communityId}`);
    const data = await res.json();

    if (!data.success || !data.community) throw new Error(data.message || "Failed to fetch community");

    currentCommunity = data.community;

    // Save context for THIS community only
    localStorage.setItem("currentCommunityId", currentCommunity._id);
    localStorage.setItem("currentCommunity", currentCommunity.name);
    localStorage.setItem("communityPurpose", currentCommunity.description || "");
    localStorage.setItem("communityAvatar", currentCommunity.avatar || "");

    renderCommunityInfo();
    renderMembers();

    // üëá Load all messages for this community
    const messageRes = await fetch(`http://localhost:3000/api/communities/${communityId}/messages?username=${currentUser.username}`);
    const messageData = await messageRes.json();

    if (messageData.success) {
      const chatArea = document.getElementById("chat-area");
      chatArea.innerHTML = ""; // Clear old ones

      messageData.messages.forEach(msg => {
  const msgDiv = document.createElement("div");
  msgDiv.className = msg.sender.username === currentUser.username ? "message you" : "message";
  msgDiv.dataset.id = msg._id; // for delete/edit to work
  msgDiv.dataset.timestamp = new Date(msg.time).getTime();
  msgDiv.setAttribute("oncontextmenu", "event.preventDefault();");
  msgDiv.setAttribute("ontouchstart", `startLongPress('${msg._id}')`);
  msgDiv.setAttribute("ontouchend", `cancelLongPress()`);

  // üîí Save raw message as backup for undo
  msgDiv.dataset.backup = JSON.stringify(msg);

  let inner = `<div class="sender">
    <img src="${msg.sender.avatar}" style="width:24px;height:24px;border-radius:50%;margin-right:6px;vertical-align:middle;">
    <strong><a href="profile.html?user=${msg.sender.username}" style="color:inherit;text-decoration:none;">${msg.sender.name}</a></strong>
  </div>`;

  if (msg.sender.username === currentUser.username) {
    inner += `<span class="edit-btn" onclick="startEditMessage('${msg._id}')" style="margin-left: 10px; color: #ffa500;"><i class="fas fa-edit"></i></span>`;
  }

  if (msg.replyTo) {
  inner += `<div 
    class="reply-scroll"
    data-replytext="${msg.replyTo.replace(/"/g, '&quot;')}"
    style="background: #1f1f1f; padding: 6px 10px; font-size: 12px; border-left: 3px solid #25d366; margin-bottom: 6px; border-radius: 4px; color: #25d366; cursor: pointer;">
    ${msg.replyTo}
  </div>`;
}


  if (msg.text) {
    inner += `<div class="text">${msg.text}</div>`;
  }

  // üìé Media files
  if (msg.media.length > 0) {
    inner += `<div class="file-grid" style="display: grid; gap: 8px; grid-template-columns: repeat(auto-fill, minmax(120px, 1fr)); margin-top: 8px;">`;

    msg.media.forEach(file => {
      let fileHTML = '';

      if (file.type.startsWith('image/')) {
        fileHTML = `<a href="#" onclick="openPreview('${file.url}', '${file.name}'); return false;">
          <div style="position: relative; width: 100%; padding-top: 100%; border-radius: 6px; overflow: hidden;">
            <img src="${file.url}" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; object-fit: cover;">
          </div>
        </a>`;
      } else if (file.type.startsWith('video/')) {
        fileHTML = `<a href="#" onclick="openPreview('${file.url}', '${file.name}'); return false;">
          <div style="position: relative; width: 100%; padding-top: 100%; border-radius: 6px; overflow: hidden;">
            <video src="${file.url}" muted autoplay loop style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; object-fit: cover;"></video>
          </div>
        </a>`;
      } else if (file.type.startsWith('audio/')) {
        fileHTML = `<audio controls style="width: 100%; border-radius: 6px;">
            <source src="${file.url}" type="${file.type}">
            Your browser does not support the audio element.
        </audio>`;
      } else {
        fileHTML = `<a href="${file.url}" download="${file.name}" style="color: #fff;">
          <i class="fas fa-file" style="margin-right: 5px;"></i> ${file.name}
        </a>`;
      }

      inner += `<div>${fileHTML}${file.caption ? `<div style="font-size: 12px; color: #ccc;">${file.caption}</div>` : ''}</div>`;
    });

    inner += `</div>`;
  }

  inner += `
    <div class="time">
      ${new Date(msg.time).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
      <span class="delivery-status" style="display:inline-block; width:8px; height:8px; margin-left:6px; background:limegreen; border-radius:50%; vertical-align:middle;" data-status="seen"></span>
    </div>`;

  inner += `<div class="reply-btn" onclick="prepareReply(this)" style="font-size: 12px; color: #25d366; margin-top: 5px; cursor: pointer;">Reply</div>`;

  if (msg.sender.username === currentUser.username) {
    inner += `<span class="delete-btn" onclick="confirmDelete('${msg._id}')"><i class="fas fa-trash"></i></span>`;
  }

  msgDiv.innerHTML = inner;
  msgDiv.dataset.backupHTML = msgDiv.innerHTML;

  const textEl = msgDiv.querySelector('.text');
  if (textEl) applyReadMore(textEl);

  chatArea.appendChild(msgDiv);
});


      // Auto-scroll to bottom
      chatArea.scrollTop = chatArea.scrollHeight;
    }

  } catch (err) {
    console.error("‚ùå Error loading community:", err);
    alert("Error loading community. Please try again.");
    window.location.href = "communitylist.html";
  }
}


// ‚úÖ Render top header
function renderCommunityInfo() {
  document.getElementById('community-name').textContent = currentCommunity.name;
  document.getElementById('community-purpose').textContent = currentCommunity.description || "";
  document.getElementById('community-avatar').src = currentCommunity.avatar || 'https://via.placeholder.com/40?text=C';
}

// ‚úÖ Invite modal
function openInviteModal() {
  const link = `${window.location.origin}/accept.html?id=${currentCommunity._id}`;
  document.getElementById('groupLink').value = link;
  document.getElementById('inviteModal').style.display = 'flex';
}
function closeInviteModal() {
  document.getElementById('inviteModal').style.display = 'none';
}
function copyLink() {
  const input = document.getElementById('groupLink');
  input.select();
  document.execCommand('copy');
  alert('Group link copied to clipboard!');
}

// ‚úÖ Exit community
async function confirmExitCommunity() {
  if (!confirm("Are you sure you want to exit this community?")) return;

  try {
    const res = await fetch(`http://localhost:3000/api/communities/${communityId}/leave`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ username: currentUsername })
    });

    const data = await res.json();
    if (!data.success) throw new Error(data.message || "Error leaving community");

    // Clear context
    localStorage.removeItem("currentCommunityId");
    localStorage.removeItem("currentCommunity");
    localStorage.removeItem("communityPurpose");
    localStorage.removeItem("communityAvatar");
    

    alert("You have exited the community.");
    window.location.href = "communitylist.html";
  } catch (err) {
    console.error("‚ùå Failed to leave community:", err);
    alert("Error exiting community. Please try again.");
  }
}


// ‚úÖ Render Members
async function renderMembers() {
  const container = document.getElementById("memberList");
  container.innerHTML = "";

  try {
    const res = await fetch(`http://localhost:3000/api/communities/${currentCommunity._id}/members`);
    const data = await res.json();

    if (!data.success || !data.members) {
      container.innerHTML = "<p>Community members not found.</p>";
      return;
    }

    data.members.forEach(member => {
      const row = document.createElement("div");
      row.style = "display: flex; justify-content: space-between; align-items: center; padding: 6px 0; border-bottom: 1px solid #333;";

      row.innerHTML = `
        <div style="display: flex; align-items: center;">
          <img src="${member.avatar}" style="width: 30px; height: 30px; border-radius: 50%; margin-right: 8px;">
          <span>${member.name} ${member.isAdmin ? '<strong style="color:#0f0;">(admin)</strong>' : ''}</span>
        </div>

        ${
  currentCommunity.creator === currentUsername && member.username !== currentUsername
    ? member.isAdmin
      ? `<button onclick="demoteAdmin('${member.username}')" style="padding: 4px 10px; background: #666; border: none; border-radius: 4px; color: white; font-size: 12px;">Remove Admin</button>`
      : `<button onclick="promoteToAdmin('${member.username}')" style="padding: 4px 10px; background: #ff4081; border: none; border-radius: 4px; color: white; font-size: 12px;">Make Admin</button>`
    : ""
}

      `;
      container.appendChild(row);
    });

  } catch (err) {
    console.error("‚ùå Error loading members:", err);
    container.innerHTML = "<p>Error loading members.</p>";
  }
}

// ‚úÖ Promote to admin
function promoteToAdmin(username) {
  if (currentCommunity.creator !== currentUsername) {
    return alert("Only the creator can assign admins.");
  }

  if (!currentCommunity.members.includes(username)) {
    return alert("User is not a member.");
  }

  if (currentCommunity.admins.includes(username)) {
    return alert(username + " is already an admin.");
  }

  // Send request to backend
  fetch(`http://localhost:3000/api/communities/${currentCommunity._id}/promote`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    body: JSON.stringify({ username })
  })
  .then(res => res.json())
  .then(data => {
    if (data.success) {
      alert(`${username} is now an admin.`);
      // Update local state and UI
      currentCommunity.admins.push(username);
      renderMembers();
    } else {
      alert("‚ùå Failed to promote: " + data.message);
    }
  })
  .catch(err => {
    console.error("‚ùå Promote error:", err);
    alert("Server error while promoting.");
  });
}

function demoteAdmin(username) {
  if (currentCommunity.creator !== currentUsername) {
    return alert("Only the creator can demote admins.");
  }

  if (!currentCommunity.admins.includes(username)) {
    return alert("User is not an admin.");
  }

  fetch(`http://localhost:3000/api/communities/${currentCommunity._id}/demote`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ username })
  })
  .then(res => res.json())
  .then(data => {
    if (data.success) {
      currentCommunity.admins = currentCommunity.admins.filter(admin => admin !== username);
      alert(username + " has been demoted.");
      renderMembers();
    } else {
      alert("‚ùå Failed to demote: " + data.message);
    }
  })
  .catch(err => {
    console.error("‚ùå Demote error:", err);
    alert("Server error during demotion.");
  });
}



// ‚úÖ Open / Close member modal
function openMemberModal() {
  document.getElementById("memberModal").style.display = "flex";
  renderMembers();
}
function closeMemberModal() {
  document.getElementById("memberModal").style.display = "none";
}

// ‚úÖ Chat / Messaging
function toggleAttachmentMenu() {
  const menu = document.getElementById('attachment-menu');
  menu.style.display = menu.style.display === 'block' ? 'none' : 'block';
  setTimeout(() => menu.style.display = 'none', 10000);
}
function handleFile(event) {
  const files = Array.from(event.target.files);
  selectedFiles = selectedFiles.concat(files);
  const preview = document.getElementById('file-preview');
  preview.innerHTML = '';

  selectedFiles.forEach((file, index) => {
    const url = URL.createObjectURL(file);
    let mediaPreview = '';

    if (file.type.startsWith('image/')) {
      mediaPreview = `<img src="${url}" style="max-width: 100%; border-radius: 8px;">`;
    } else if (file.type.startsWith('video/')) {
      mediaPreview = `<video controls style="max-width: 100%; border-radius: 8px;"><source src="${url}" type="${file.type}"></video>`;
    } else {
      mediaPreview = `<i class="fas fa-file"></i> ${file.name}`;
    }

    preview.innerHTML += `
      <div style="margin-bottom: 10px; background: #2a2a2a; padding: 8px; border-radius: 6px;">
        ${mediaPreview}
        <input type="text" placeholder="Write caption..." data-index="${index}" class="caption-input" style="margin-top: 5px; width: 100%; padding: 5px; border-radius: 6px; border: none; background: #3a3a3a; color: white;">
      </div>`;
  });
}

async function sendMessage() {
  const input = document.getElementById('chat-input');
  const text = input.value.trim();
  const captions = document.querySelectorAll('.caption-input');
  const chatArea = document.getElementById('chat-area');

  if (!text && selectedFiles.length === 0) return;

  const msgId = `msg-${Date.now()}`;
  const timestamp = Date.now();

  // ‚úÖ Upload files to backend (compressed)
  let mediaFiles = [];

  if (selectedFiles.length > 0) {
    const formData = new FormData();
    selectedFiles.forEach(file => formData.append('files', file));

    try {
      const uploadRes = await fetch('http://localhost:3000/api/upload', {
        method: 'POST',
        body: formData
      });

      const uploadData = await uploadRes.json();

      if (uploadData.success && Array.isArray(uploadData.files)) {
        mediaFiles = uploadData.files.map((file, index) => ({
          name: file.name || `File ${index + 1}`,
          type: file.type || selectedFiles[index]?.type || 'application/octet-stream',
          url: file.url,
          caption: captions[index]?.value || ''
        }));
      } else {
        alert('‚ùå File upload failed: ' + (uploadData.message || 'Unknown error'));
        return;
      }
    } catch (err) {
      console.error("‚ùå Upload error:", err);
      alert("Upload failed. Please try again.");
      return;
    }
  }

  // ‚úÖ Build message object
  const message = {
    sender: {
      name: currentUser.name,
      username: currentUser.username,
      avatar: currentUser.avatar
    },
    text,
    media: mediaFiles,
    replyTo: replyTo || "",
    time: timestamp
  };

  // ‚úÖ Save to backend
const formData = new FormData();
formData.append("sender", JSON.stringify(message.sender));
formData.append("text", message.text);
formData.append("replyTo", message.replyTo);
formData.append("time", message.time);
formData.append("media", JSON.stringify(mediaFiles)); // ‚úÖ Important fix

fetch(`http://localhost:3000/api/communities/${currentCommunity._id}/messages`, {
  method: "POST",
  body: formData
})
.then(res => res.json())
.then(data => {
  if (!data.success) {
    console.error("‚ùå Failed to save message:", data.message);
    return;
  }

  // ‚úÖ Add it using renderMessage() to get full consistent rendering (including media)
  renderMessage(data.message);

  // ‚úÖ Reset form
  input.value = '';
  selectedFiles = [];
  replyTo = null;
  document.getElementById('file-preview').innerHTML = '';
  document.getElementById('reply-preview').style.display = 'none';
  chatArea.scrollTop = chatArea.scrollHeight;
})

.catch(err => {
  console.error("‚ùå Network error:", err);
}); }
 
let longPressTimeout;
function startLongPress(msgId) {
  longPressTimeout = setTimeout(() => {
    confirmDelete(msgId);
  }, 800); // 800ms = long press threshold
}
function cancelLongPress() {
  clearTimeout(longPressTimeout);
}

function confirmDelete(msgId) {
  const msg = document.querySelector(`[data-id="${msgId}"]`);
  if (!msg) return;

  // üß† Backup full message HTML and metadata
  msg.dataset.backupHTML = msg.innerHTML;

  const backupMessage = {
    sender: {
      name: currentUser.name,
      username: currentUser.username,
      avatar: currentUser.avatar
    },
    text: msg.querySelector('.text')?.innerText || '',
    media: [], // Optional: extract media if needed
    replyTo: '', // Optional: extract reply text if needed
    time: Number(msg.dataset.timestamp) || Date.now()
  };

  msg.dataset.backup = JSON.stringify(backupMessage);

  // ‚úÖ Show "Message deleted" notice with a clean Undo button
  msg.innerHTML = `
    <div style="text-align:center;color:#aaa;font-size:13px;">
      Message deleted.
      <button onclick="undoDelete('${msgId}')" style="
        background: #25d366;
        border: none;
        padding: 4px 10px;
        border-radius: 12px;
        color: white;
        font-size: 12px;
        margin-left: 8px;
        cursor: pointer;
      ">Undo</button>
    </div>
  `;

  msg.classList.add('deleted-temp');

  // ‚è≥ After 4 seconds, delete from backend if still deleted
  setTimeout(() => {
    if (msg.classList.contains('deleted-temp')) {
      fetch(`http://localhost:3000/api/communities/${communityId}/messages/${msgId}`, {
        method: "DELETE"
      })
      .then(res => res.json())
      .then(data => {
        if (data.success) {
          console.log("‚úÖ Message deleted permanently from backend");
        } else {
          console.error("‚ùå Backend delete failed:", data.message);
        }
      })
      .catch(err => {
        console.error("‚ùå Server error while deleting:", err);
      });

      msg.remove(); // remove from DOM
    }
  }, 4000);
}

function undoDelete(msgId) {
  const msg = document.querySelector(`[data-id="${msgId}"]`);
  if (!msg) return;

  const backupData = msg.dataset.backup;       // Full message object
  const backupHTML = msg.dataset.backupHTML;   // Original HTML
  if (!backupData || !backupHTML) return;

  const restoredMessage = JSON.parse(backupData);

  fetch(`http://localhost:3000/api/communities/${communityId}/messages`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    body: JSON.stringify(restoredMessage)
  })
  .then(res => res.json())
  .then(data => {
    if (data.success) {
      msg.innerHTML = backupHTML;
      msg.dataset.id = data.message._id; // Assign new backend ID
      msg.classList.remove('deleted-temp');
      console.log("‚úÖ Undo successful: message re-saved to backend");
    } else {
      console.error("‚ùå Undo failed:", data.message);
    }
  })
  .catch(err => {
    console.error("‚ùå Network error during undo:", err);
  });
}

function openPreview(url, filename) {
  const previewModal = document.getElementById('previewModal');
  const content = document.getElementById('previewContent');
  const download = document.getElementById('downloadLink');

  content.innerHTML = '';

  // Check for file type
  if (url.match(/\.(jpg|jpeg|png|gif|webp)$/i)) {
    // üì∏ Image
    content.innerHTML = `<img src="${url}" alt="${filename}" style="max-width:100%; border-radius:10px;" />`;

  } else if (url.match(/\.(mp4|webm|ogg)$/i)) {
    // üéûÔ∏è Video
    content.innerHTML = `
      <video controls autoplay style="width:100%; border-radius:10px;">
        <source src="${url}" type="video/mp4">
        Your browser does not support the video tag.
      </video>
    `;

  } else if (url.match(/\.(mp3|wav|ogg)$/i)) {
    // üéß Audio
    content.innerHTML = `
      <audio controls autoplay style="width:100%; border-radius:10px;">
        <source src="${url}" type="audio/mpeg">
        Your browser does not support the audio element.
      </audio>
    `;

  } else if (url.match(/\.pdf$/i)) {
    // üìÑ PDF
    content.innerHTML = `<iframe src="${url}" style="width:90vw; height:80vh; border-radius:10px;"></iframe>`;

  } else {
    // ‚ùî Unknown file type
    content.innerHTML = `
      <i class="fas fa-file" style="font-size: 50px; color: white;"></i>
      <p style="color: white;">${filename}</p>
    `;
  }
  // Set up download button
  download.href = url;
  download.download = filename;
  download.innerText = "Download File";
  download.style.display = 'inline-block';
  // Show modal
  previewModal.style.display = 'flex';
}

function closePreview() {
  document.getElementById('previewModal').style.display = 'none';
}
let replyTo = null;
function prepareReply(buttonElement) {
  const messageBox = buttonElement.closest('.message');
  const textContent = messageBox.querySelector('.text')?.innerText 
                   || messageBox.querySelector('.message-body')?.innerText 
                   || "Media message";

  replyTo = textContent;
  document.getElementById('reply-text').innerText = `Replying to: "${textContent}"`;
  document.getElementById('reply-preview').style.display = 'block';
}



function cancelReply() {
  replyTo = null;
  document.getElementById('reply-preview').style.display = 'none';
}
function startEditMessage(msgId) {
  const msg = document.querySelector(`[data-id="${msgId}"]`);
  if (!msg) return;

  const timestamp = parseInt(msg.dataset.timestamp);
  const now = Date.now();
  const diffMinutes = (now - timestamp) / (1000 * 60);
  if (diffMinutes > 15) {
    alert("You can no longer edit this message.");
    return;
  }

  if (msg.querySelector('.edit-input') || msg.querySelector('.edit-controls')) return;

  const textEl = msg.querySelector('.text');
  if (!textEl) return;

  const originalText = textEl.innerText.replace(' (edited)', '');
  const input = document.createElement('input');
  input.type = 'text';
  input.value = originalText;
  input.className = 'edit-input';
  input.style = 'width: 100%; padding: 6px; margin-top: 6px; border-radius: 6px; background: #444; color: white; border: none;';

  textEl.replaceWith(input);

  const editBtn = msg.querySelector('.edit-btn');
  const controls = document.createElement('span');
  controls.className = 'edit-controls';
  controls.style = 'margin-left: 8px;';
  controls.innerHTML = `
    <button onclick="saveEditedMessage('${msgId}')" style="background:#25d366;color:white;border:none;padding:2px 6px;border-radius:6px;font-size:11px;">Save</button>
    <button onclick="cancelEditMessage('${msgId}', \`${originalText.replace(/`/g, '\\`')}\`)" style="background:#ff4d4d;color:white;border:none;padding:2px 6px;border-radius:6px;font-size:11px;margin-left:4px;">Cancel</button>
  `;
  editBtn.insertAdjacentElement('afterend', controls);
}

function saveEditedMessage(msgId) {
  const msg = document.querySelector(`[data-id="${msgId}"]`);
  if (!msg) return;

  const input = msg.querySelector('.edit-input');
  const newText = input.value.trim();
  if (!newText) return;

  fetch(`http://localhost:3000/api/communities/${communityId}/messages/${msgId}`, {
    method: "PATCH",
    headers: {
      "Content-Type": "application/json"
    },
    body: JSON.stringify({ text: newText + " (edited)" })
  })
  .then(res => res.json())
  .then(data => {
    if (data.success) {
      const newTextDiv = document.createElement('div');
      newTextDiv.className = 'text';
      newTextDiv.innerText = newText + " (edited)";
      input.replaceWith(newTextDiv);
      msg.querySelector('.edit-controls')?.remove();
      console.log("‚úÖ Message edited and saved");
    } else {
      alert("Failed to save edit: " + data.message);
    }
  })
  .catch(err => {
    console.error("‚ùå Error saving edit:", err);
    alert("Error saving edit");
  });
}

function cancelEditMessage(msgId, originalText) {
  const msg = document.querySelector(`[data-id="${msgId}"]`);
  if (!msg) return;

  const input = msg.querySelector('.edit-input');
  const original = document.createElement('div');
  original.className = 'text';
  original.innerText = originalText;

  input.replaceWith(original);
  msg.querySelector('.edit-controls')?.remove();
}

function renderMessage(message) {
  const chatBox = document.getElementById("chat-area"); // ‚úÖ Correct container
  const isCurrentUser = message.sender.username === currentUser.username;
  const timeString = new Date(message.time).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  const msg = document.createElement("div");

  msg.className = isCurrentUser ? "message you" : "message";
  msg.dataset.id = message._id;
  msg.dataset.timestamp = new Date(message.time).getTime();
  msg.setAttribute('oncontextmenu', 'event.preventDefault();');
  msg.setAttribute('ontouchstart', `startLongPress('${message._id}')`);
  msg.setAttribute('ontouchend', `cancelLongPress()`);

  // Save backup for undo
  msg.dataset.backup = JSON.stringify(message);
  msg.dataset.backupHTML = msg.innerHTML;

  let inner = `
    <div class="sender">
      <img src="${message.sender.avatar}" style="width:24px;height:24px;border-radius:50%;margin-right:6px;">
      <strong>
        <a href="profile.html?user=${message.sender.username}" style="color:inherit;text-decoration:none;">
          ${message.sender.name}
        </a>
      </strong>
    </div>
  `;

  if (isCurrentUser) {
    inner += `
      <span class="edit-btn" onclick="startEditMessage('${message._id}')" style="margin-left: 10px; color: #ffa500; cursor: pointer;">
        <i class="fas fa-edit"></i>
      </span>
      <span class="delete-btn" onclick="confirmDelete('${message._id}')" style="margin-left: 10px; color: #f00; cursor: pointer;">
        <i class="fas fa-trash"></i>
      </span>
    `;
  }

if (message.replyTo) {
  inner += `<div 
    class="reply-scroll"
    data-replytext="${message.replyTo.replace(/"/g, '&quot;')}"
    style="background: #1f1f1f; padding: 6px 10px; font-size: 12px; border-left: 3px solid #25d366; margin-bottom: 6px; border-radius: 4px; color: #25d366; cursor: pointer;">
    ${message.replyTo}
  </div>`;
}


  if (message.text) {
  inner += `<div class="message-body readmore">${message.text}</div>`;
}

  // Media section
  if (message.media && message.media.length > 0) {
    inner += `<div class="file-grid" style="display: grid; gap: 8px; grid-template-columns: repeat(auto-fill, minmax(120px, 1fr)); margin-top: 8px;">`;

    message.media.forEach(file => {
      let fileHTML = "";
      if (file.type.startsWith("image/")) {
        fileHTML = `
          <a href="#" onclick="openPreview('${file.url}', '${file.name}'); return false;">
            <div style="position: relative; width: 100%; padding-top: 100%; border-radius: 6px; overflow: hidden;">
              <img src="${file.url}" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; object-fit: cover;">
            </div>
          </a>`;
      } else if (file.type.startsWith("video/")) {
        fileHTML = `
          <a href="#" onclick="openPreview('${file.url}', '${file.name}'); return false;">
            <div style="position: relative; width: 100%; padding-top: 100%; border-radius: 6px; overflow: hidden;">
              <video src="${file.url}" muted autoplay loop style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; object-fit: cover;"></video>
            </div>
          </a>`;
      } else if (file.type.startsWith("audio/")) {
        fileHTML = `
          <audio controls style="width: 100%; border-radius: 6px;">
            <source src="${file.url}" type="${file.type}">
            Your browser does not support the audio element.
          </audio>`;
      } else {
        fileHTML = `<a href="${file.url}" download="${file.name}" style="color: #fff;">
          <i class="fas fa-file" style="margin-right: 5px;"></i> ${file.name}
        </a>`;
      }
      inner += `<div>${fileHTML}${file.caption ? `<div style="font-size: 12px; color: #ccc;">${file.caption}</div>` : ''}</div>`;
    });

    inner += `</div>`;
  }

  inner += `
    <div class="time">
      ${timeString}
    </div>
    <div class="reply-btn" onclick="prepareReply(this)" style="font-size: 12px; color: #25d366; margin-top: 5px; cursor: pointer;">Reply</div>
  `;

  msg.innerHTML = inner;
  const body = msg.querySelector(".message-body");
  if (body) applyReadMore(body);

  chatBox.appendChild(msg);
}



function toggleTopMenu() {
  const menu = document.getElementById('top-menu');
  menu.style.display = menu.style.display === 'block' ? 'none' : 'block';
  setTimeout(() => menu.style.display = 'none', 8000);
}

// üåü Clear all chat for current user
function clearChat() {
  if (!confirm("Are you sure you want to clear all your messages in this community?")) return;

  fetch(`http://localhost:3000/api/communities/${currentCommunity._id}/clear`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ username: currentUser.username })
  })
  .then(res => res.json())
  .then(data => {
    if (data.success) {
      alert("‚úÖ Your chat has been cleared.");
      document.getElementById('chat-area').innerHTML = '';
      localStorage.removeItem('chatHTML');
    } else {
      alert("‚ùå Failed to clear chat: " + data.message);
    }
  })
  .catch(err => {
    console.error("‚ùå Clear chat error:", err);
    alert("Server error. Please try again.");
  });
}

function applyReadMore(element, limit = 300) {
  const fullText = element.textContent.trim();

  if (fullText.length > limit) {
    const shortText = fullText.slice(0, limit) + "...";
    let expanded = false;
    const toggleBtn = document.createElement("span");
    toggleBtn.textContent = " Read more";
    toggleBtn.style.color = "#25d366";
    toggleBtn.style.cursor = "pointer";
    toggleBtn.style.marginLeft = "5px";

    toggleBtn.addEventListener("click", () => {
      expanded = !expanded;
      element.textContent = expanded ? fullText : shortText;
      toggleBtn.textContent = expanded ? " Show less" : " Read more";
      element.appendChild(toggleBtn);
    });

    element.textContent = shortText;
    element.appendChild(toggleBtn);
  }
}

// ‚úÖ Utility
function openPreview(url, filename) {
  const previewModal = document.getElementById('previewModal');
  const content = document.getElementById('previewContent');
  const download = document.getElementById('downloadLink');
  content.innerHTML = `<img src="${url}" alt="${filename}" style="max-width:100%; border-radius:10px;" />`;
  download.href = url;
  download.download = filename;
  download.innerText = "Download File";
  download.style.display = 'inline-block';
  previewModal.style.display = 'flex';
}
function closePreview() {
  document.getElementById('previewModal').style.display = 'none';
}
function openMemberModal() {
  document.getElementById("memberModal").style.display = "flex";
  renderMembers();
}
function closeMemberModal() {
  document.getElementById("memberModal").style.display = "none";
}


function openFriendShareModal() {
  document.getElementById("friendShareModal").style.display = "flex";

  const friendList = document.getElementById("friendList");
  friendList.innerHTML = "Loading...";

  fetch(`http://localhost:3000/api/friends/${currentUser.username}`)
    .then(res => res.json())
    .then(friends => {
      if (!Array.isArray(friends) || friends.length === 0) {
        friendList.innerHTML = "<p>No friends found.</p>";
        return;
      }

      friendList.innerHTML = '';
      friends.forEach(friend => {
        friendList.innerHTML += `
          <label style="display: flex; align-items: center; gap: 10px; margin-bottom: 6px;">
            <input type="checkbox" value="${friend.username}" />
            <img src="${friend.avatar}" style="width: 30px; height: 30px; border-radius: 50%;" />
            <span>${friend.firstName || friend.name || '‚Äî'} ${friend.surname || ''}</span>
          </label>`;
      });
    })
    .catch(err => {
      console.error("‚ùå Failed to load friends:", err);
      friendList.innerHTML = "<p>Error loading friends.</p>";
    });
}

function closeFriendShareModal() {
  document.getElementById("friendShareModal").style.display = "none";
}

function sendCommunityInvites() {
  const selected = Array.from(document.querySelectorAll("#friendList input:checked")).map(cb => cb.value);
  if (selected.length === 0) {
    alert("Please select at least one friend.");
    return;
  }

fetch("http://localhost:3000/api/community-invites/send", {
  method: "POST",
  headers: { "Content-Type": "application/json" },
  body: JSON.stringify({
    sender: currentUser.username,
    communityId: currentCommunity._id, 
    recipients: selected
  })
})


  .then(res => res.json())
  .then(data => {
    if (data.success) {
      alert("‚úÖ Invite sent to selected friends!");
      closeFriendShareModal();
      closeInviteModal();
    } else {
      alert("‚ùå Failed to send invites: " + data.message);
    }
  })
  .catch(err => {
    console.error("‚ùå Invite error:", err);
    alert("Something went wrong. Try again.");
  });
}


// üîç Enable scroll to parent message
document.addEventListener("click", function (e) {
  if (e.target.classList.contains("reply-scroll")) {
    const replyText = e.target.dataset.replytext;
    if (!replyText) return;

    // Try to find the message containing this exact reply text
    const allMessages = document.querySelectorAll("#chat-area .message");
    for (let msg of allMessages) {
      const textDiv = msg.querySelector(".message-body, .text");
      if (textDiv && textDiv.innerText.trim() === replyText.trim()) {
        msg.scrollIntoView({ behavior: "smooth", block: "center" });
        msg.style.boxShadow = "0 0 8px 2px #25d366";
        setTimeout(() => msg.style.boxShadow = "", 1500);
        break;
      }
    }
  }
});
socket.on("community-message", (msg) => {
  if (msg.sender?.username === currentUser.username) return; // Avoid re-rendering own message
  renderMessage(msg); // Instantly show received message
   // ‚úÖ Auto-scroll to bottom after new incoming message
  const chatArea = document.getElementById("chat-area");
  chatArea.scrollTop = chatArea.scrollHeight;
});

const typingStatus = document.getElementById("typing-status");
socket.on("typing-community", ({ from }) => {
  if (from !== currentUser.name) {
    typingStatus.textContent = `${from} is typing...`;
  }
});

socket.on("stopTyping-community", ({ from }) => {
  if (from !== currentUser.name) {
    typingStatus.textContent = "";
  }
});


</script>

</body>
</html>




2. accept.html (frontend)
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Join Community</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
  <style>
    body {
      background-color: #121212;
      color: #fff;
      font-family: 'Segoe UI', sans-serif;
      max-width: 480px;
      margin: auto;
      padding: 20px;
      text-align: center;
    }

    .avatar {
      width: 100px;
      height: 100px;
      border-radius: 50%;
      object-fit: cover;
      margin-bottom: 15px;
    }

    h1 { font-size: 22px; margin-bottom: 10px; }
    p { color: #ccc; font-size: 14px; margin-bottom: 20px; }

    .info-box {
      background-color: #1f1f1f;
      padding: 15px;
      border-radius: 10px;
      text-align: left;
      margin-bottom: 20px;
    }

    .btn {
      background-color: #25d366;
      border: none;
      color: white;
      padding: 10px 20px;
      font-size: 16px;
      border-radius: 6px;
      cursor: pointer;
      margin-top: 10px;
    }

    .btn:disabled {
      background-color: #555;
      cursor: not-allowed;
    }
  </style>
</head>
<body>

  <img id="avatar" src="" alt="Community Avatar" class="avatar" />
  <h1 id="name">Community Name</h1>
  <p id="purpose">Purpose of the community...</p>

  <div class="info-box">
    <p><strong>Owner:</strong> <span id="owner">--</span></p>
    <p><strong>Category:</strong> <span id="category">--</span></p>
    <p><strong>Created:</strong> <span id="createdAt">--</span></p>
  </div>

  <button id="joinBtn" class="btn">Join Community</button>

  <script>
  const params = new URLSearchParams(window.location.search);
  const communityId = params.get("id");

  const avatar = document.getElementById("avatar");
  const name = document.getElementById("name");
  const purpose = document.getElementById("purpose");
  const owner = document.getElementById("owner");
  const category = document.getElementById("category");
  const createdAt = document.getElementById("createdAt");
  const joinBtn = document.getElementById("joinBtn");

  const username = localStorage.getItem("username");

  if (!communityId || !username) {
    document.body.innerHTML = "<h2>Invalid invite or not logged in.</h2>";
    return;
  }

  // ‚úÖ Step 1: Load community info
  fetch(`http://localhost:3000/api/communities/${communityId}`)
    .then(res => res.json())
    .then(data => {
      if (!data.success || !data.community) {
        document.body.innerHTML = "<h2>Community not found.</h2>";
        return;
      }

      const c = data.community;

      avatar.src = c.avatar || "https://via.placeholder.com/100?text=C";
      name.textContent = c.name;
      purpose.textContent = c.description || "No description provided.";
      owner.textContent = c.creator || "Unknown";
      category.textContent = "General"; // Optional: Add this to your model later
      createdAt.textContent = new Date(c.createdAt).toLocaleDateString();

      // Optional: Disable button if already a member
      if (c.members.includes(username)) {
        joinBtn.textContent = "Already Joined";
        joinBtn.disabled = true;
      }
    })
    .catch(err => {
      console.error("‚ùå Error loading community:", err);
      document.body.innerHTML = "<h2>Error loading community.</h2>";
    });

  // ‚úÖ Step 2: Join logic
  joinBtn.addEventListener("click", () => {
    joinBtn.disabled = true;
    joinBtn.textContent = "Joining...";

    fetch(`http://localhost:3000/api/communities/${communityId}/join`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({ username })
    })
      .then(res => res.json())
      .then(data => {
        if (data.success) {
          alert("üéâ You have joined the community!");

          // Save current community context for redirect
          localStorage.setItem("currentCommunityId", communityId);

          window.location.href = "community.html";
        } else {
          alert("Failed to join: " + data.message);
          joinBtn.disabled = false;
          joinBtn.textContent = "Join Community";
        }
      })
      .catch(err => {
        console.error("‚ùå Join error:", err);
        alert("Server error joining community.");
        joinBtn.disabled = false;
        joinBtn.textContent = "Join Community";
      });
  });
</script>

</body>
</html>


3. community.js routes
const express = require("express");
const router = express.Router();
const Community = require("../models/Community");


// ‚úÖ Create new community
router.post("/create", async (req, res) => {
  try {
    const { name, description, avatar, username } = req.body;

    if (!name || !username) {
      return res.status(400).json({ success: false, message: "Missing fields" });
    }


    const newCommunity = await Community.create({
      name,
      description,
      avatar: avatar || "https://via.placeholder.com/50",
      creator: username,
      members: [username],
      admins: [username],
    });

    res.json({ success: true, community: newCommunity });
  } catch (err) {
    console.error("‚ùå Failed to create community:", err);
    res.status(500).json({ success: false });
  }
});


// ‚úÖ Get a specific community by its ID
router.get("/user/:username", async (req, res) => {
  try {
    const username = req.params.username;

    const owned = await Community.find({ creator: username });
    const joined = await Community.find({
      members: username,
      creator: { $ne: username },
    });

    res.json({ owned, joined });
  } catch (err) {
    console.error("‚ùå Failed to fetch user communities:", err);
    res.status(500).json({ success: false });
  }
});

// ‚úÖ Get a specific community by its ID to Load Members
router.get("/:id", async (req, res) => {
  try {
    const community = await Community.findById(req.params.id); // Uses native _id now
    if (!community) {
      return res.status(404).json({ success: false, message: "Community not found" });
    }
    res.json({ success: true, community });
  } catch (err) {
    console.error("‚ùå Failed to get community:", err);
    res.status(500).json({ success: false, message: "Server error" });
  }
});


// ‚úÖ Get all communities
router.get("/all", async (req, res) => {
  try {
    const communities = await Community.find({});
    res.json(communities);
  } catch (err) {
    console.error("‚ùå Failed to fetch communities:", err);
    res.status(500).json({ success: false, message: "Server error" });
  }
});

// ‚úÖ Leave community
router.post("/:id/leave", async (req, res) => {
  try {
    const { username } = req.body;
    if (!username) return res.status(400).json({ success: false, message: "Missing username" });

    const community = await Community.findById(req.params.id); // ‚úÖ FIXED TO _id
    if (!community) return res.status(404).json({ success: false, message: "Community not found" });

    community.members = community.members.filter(m => m !== username);
    community.admins = community.admins.filter(a => a !== username);

    // If creator left and no admins remain, delete
    if (community.creator === username && community.admins.length === 0) {
      await Community.findByIdAndDelete(req.params.id);
      return res.json({ success: true, message: "Community deleted as no admins remain" });
    }

    await community.save();
    res.json({ success: true, message: "Left community successfully" });

  } catch (err) {
    console.error("‚ùå Failed to leave community:", err);
    res.status(500).json({ success: false, message: "Server error" });
  }
});


const User = require("../models/User");

router.get("/:id/members", async (req, res) => {
  try {
    const community = await Community.findById(req.params.id); // ‚úÖ FIXED TO _id
    if (!community) return res.status(404).json({ success: false, message: "Community not found" });

    const users = await User.find({ username: { $in: community.members } })
      .select("username firstName surname avatar");

    const members = community.members.map(username => {
      const user = users.find(u => u.username === username);
      return {
        username,
        name: user ? `${user.firstName} ${user.surname}` : username,
        avatar: user ? user.avatar : "https://via.placeholder.com/40?text=U",
        isAdmin: community.admins.includes(username),
        isCreator: community.creator === username
      };
    });

    res.json({ success: true, members });

  } catch (err) {
    console.error("‚ùå Failed to load members:", err);
    res.status(500).json({ success: false, message: "Server error" });
  }
});

// ‚úÖ JOIN community via invite link
router.post("/:id/join", async (req, res) => {
  try {
    const communityId = req.params.id;
    const { username } = req.body;

    if (!username) {
      return res.status(400).json({ success: false, message: "Username is required." });
    }

    const community = await Community.findById(communityId);
    if (!community) {
      return res.status(404).json({ success: false, message: "Community not found." });
    }

    if (community.members.includes(username)) {
      return res.json({ success: false, message: "User already a member." });
    }

    community.members.push(username);
    await community.save();

    res.json({ success: true, message: "Joined community successfully." });
  } catch (err) {
    console.error("‚ùå Error joining community:", err);
    res.status(500).json({ success: false, message: "Server error." });
  }
});

// ‚úÖ Promote a user to admin
router.post("/:id/promote", async (req, res) => {
  try {
    const communityId = req.params.id;
    const { username } = req.body;

    if (!username) return res.status(400).json({ success: false, message: "Username is required" });

    const community = await Community.findById(communityId);
    if (!community) return res.status(404).json({ success: false, message: "Community not found" });

    if (!community.members.includes(username)) {
      return res.status(400).json({ success: false, message: "User is not a member" });
    }

    if (community.admins.includes(username)) {
      return res.status(400).json({ success: false, message: "User is already an admin" });
    }

    community.admins.push(username);
    await community.save();

    res.json({ success: true, message: `${username} is now an admin.` });
  } catch (err) {
    console.error("‚ùå Error promoting to admin:", err);
    res.status(500).json({ success: false, message: "Server error" });
  }
});

// ‚úÖ Demote an admin (only creator can do this)
router.post("/:id/demote", async (req, res) => {
  try {
    const communityId = req.params.id;
    const { username } = req.body;

    if (!username) return res.status(400).json({ success: false, message: "Username is required" });

    const community = await Community.findById(communityId);
    if (!community) return res.status(404).json({ success: false, message: "Community not found" });

    if (!community.admins.includes(username)) {
      return res.status(400).json({ success: false, message: "User is not an admin" });
    }

    // Remove the username from the admins list
    community.admins = community.admins.filter(admin => admin !== username);
    await community.save();

    res.json({ success: true, message: `${username} has been demoted.` });
  } catch (err) {
    console.error("‚ùå Error demoting admin:", err);
    res.status(500).json({ success: false, message: "Server error" });
  }
});



module.exports = router;

4. communityInvites.js routes
const express = require("express");
const router = express.Router();
const CommunityInvite = require("../models/CommunityInvite");
const Community = require("../models/Community");

// üì© Send invite to selected friends
router.post("/send", async (req, res) => {
  try {
    const { sender, recipients, communityId } = req.body;
    if (!sender || !Array.isArray(recipients) || !communityId) {
      return res.status(400).json({ success: false, message: "Missing required fields" });
    }

    const invites = await Promise.all(
      recipients.map(username => {
        return CommunityInvite.create({
          sender,
          recipient: username,
          communityId
        });
      })
    );

    res.json({ success: true, invites });
  } catch (err) {
    console.error("‚ùå Failed to send invites:", err);
    res.status(500).json({ success: false, message: "Server error" });
  }
});

// üì® Get all pending invites for a user
router.get("/:username", async (req, res) => {
  try {
    const username = req.params.username;
    const invites = await CommunityInvite.find({ recipient: username, status: "pending" })
      .populate({
        path: "communityId",
        select: "name avatar description creator"
      });

    res.json({ success: true, invites });
  } catch (err) {
    console.error("‚ùå Failed to fetch invites:", err);
    res.status(500).json({ success: false });
  }
});

// ‚úÖ Accept invite
router.post("/:id/accept", async (req, res) => {
  try {
    const invite = await CommunityInvite.findById(req.params.id);
    if (!invite) return res.status(404).json({ success: false, message: "Invite not found" });

    invite.status = "accepted";
    await invite.save();

    await Community.findByIdAndUpdate(invite.communityId, {
      $addToSet: { members: invite.recipient }
    });

    res.json({ success: true, message: "Invite accepted" });
  } catch (err) {
    console.error("‚ùå Error accepting invite:", err);
    res.status(500).json({ success: false, message: "Server error" });
  }
});

// ‚ùå Decline invite
router.post("/:id/decline", async (req, res) => {
  try {
    const invite = await CommunityInvite.findById(req.params.id);
    if (!invite) return res.status(404).json({ success: false, message: "Invite not found" });

    invite.status = "declined";
    await invite.save();

    res.json({ success: true, message: "Invite declined" });
  } catch (err) {
    console.error("‚ùå Error declining invite:", err);
    res.status(500).json({ success: false, message: "Server error" });
  }
});

module.exports = router;


5. communityInvites Model
const mongoose = require("mongoose");

const inviteSchema = new mongoose.Schema({
  sender: {
    type: String,
    required: true,
    index: true // üîç helps in faster querying by sender
  },
  recipient: {
    type: String,
    required: true,
    index: true // üîç helps in faster querying by recipient
  },
  communityId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Community",
    required: true
  },
  status: {
    type: String,
    enum: ["pending", "accepted", "declined"],
    default: "pending",
    index: true // üîç allow quick filtering of pending/accepted invites
  },
  createdAt: {
    type: Date,
    default: Date.now
  }
}, {
  timestamps: true // üìÖ adds createdAt and updatedAt automatically
});

module.exports = mongoose.model("CommunityInvite", inviteSchema);

